#include <iostream>
#include <WS2tcpip.h>
#pragma comment (lib, "ws2_32.lib")
using namespace std;
void main()
{
	//inicializimi i winsock
	WSADATA wsData;
	WORD ver = MAKEWORD(2, 2);

	int wsok = WSAStartup(ver, &wsData);
		if (wsok != 0)
		{
			cerr << "Can't initialize winsock! Quitting" << endl;
			return;
		}
	//krijimi i winsock
		SOCKET listening = socket(AF_INET, SOCK_STREAM, 0);
		if (listening == INVALID_SOCKET)
		{
			cerr << "Can't create a socket! Quitting" << endl;
			return;
		}


	// lidhja e winsock me ip address dhe port
		sockaddr_in hint;
		hint.sin_family = AF_INET;
		hint.sin_port = htons(54000);
		hint.sin_addr.S_un.S_addr = INADDR_ANY;//COULD USE inet_pton
		bind(listening, (sockaddr*)&hint, sizeof(hint));

	
		listen(listening, SOMAXCONN);


	//wait for connection
		sockaddr_in client;
		int clientSize = sizeof(client);

		SOCKET clientSocket = accept(listening, (sockaddr*)&client, &clientSize);
		if (clientSocket == INVALID_SOCKET)
		{
			cerr << "Wrong client socket!" << endl;
			return;
		}
		char host[NI_MAXHOST];				//client's remote name, depends on the network
		char service[NI_MAXSERV];			//service (i.e. port) the client is connect on

		ZeroMemory(host, NI_MAXHOST);
		ZeroMemory(service, NI_MAXSERV);
		if (getnameinfo((sockaddr*)&client, sizeof(client), host, NI_MAXHOST, service, NI_MAXSERV, 0) == 0)
		{
			cout << host << " Connected on port " << service << endl;
		}
		else
		{
			inet_ntop(AF_INET, &client.sin_addr, host, NI_MAXHOST);
			cout << host << "Host connected on port " <<
				ntohs(client.sin_port) << endl;
		}



	//close listening socket
		closesocket(listening);

	//while loop accept and echo message back to client
		char buf[4096];
		while (true)
		{
			ZeroMemory(buf, 4096);

			//Wait for client to send data
			int bytesRecieved = recv(clientSocket, buf, 4096, 0);
			if (bytesRecieved == SOCKET_ERROR)
			{
				cerr << "Error in recv(). Quitting" << endl;
				break;
			}
			if (bytesRecieved == 0)
			{
				cout << "Client disconnected" << endl;
				break;
			}

		
			send(clientSocket, buf, bytesRecieved + 1, 0);

		}
	//mbyllja e socket
		closesocket(clientSocket);


		WSACleanup();

}
